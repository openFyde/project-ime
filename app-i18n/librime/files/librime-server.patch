diff --git a/proto/CMakeLists.txt b/proto/CMakeLists.txt
index 5483e89..4093b4d 100644
--- a/proto/CMakeLists.txt
+++ b/proto/CMakeLists.txt
@@ -3,14 +3,21 @@ set(RIME_PROTO_SCHEMA_DIR ${CMAKE_CURRENT_SOURCE_DIR} PARENT_SCOPE)
 # search path for generated capnp binding headers: *.capnp.h
 set(RIME_PROTO_INCLUDE_DIR ${CMAKE_CURRENT_BINARY_DIR} PARENT_SCOPE)
 
-capnp_generate_cpp(
-  CAPNP_SRCS
-  CAPNP_HDRS
-  rime_proto.capnp
-)
+#capnp_generate_cpp(
+#  CAPNP_SRCS
+#  CAPNP_HDRS
+#  rime_proto.capnp
+#)
+
+file(COPY "${CMAKE_CURRENT_SOURCE_DIR}/rime_proto.capnp.c++" DESTINATION "${CMAKE_CURRENT_BINARY_DIR}")
+file(COPY "${CMAKE_CURRENT_SOURCE_DIR}/rime_proto.capnp.h" DESTINATION "${CMAKE_CURRENT_BINARY_DIR}")
+set(CAPNP_SRCS "${CMAKE_CURRENT_BINARY_DIR}/rime_proto.capnp.c++")
+set(CAPNP_HDRS "${CMAKE_CURRENT_BINARY_DIR}/rime_proto.capnp.h")
+
 message(STATUS "compiled capnproto schemata (sources): ${CAPNP_SRCS}")
 message(STATUS "compiled capnproto schemata (headers): ${CAPNP_HDRS}")
 
+
 add_library(rime-proto-objs OBJECT ${CAPNP_SRCS})
 target_include_directories(rime-proto-objs PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
 if(BUILD_SHARED_LIBS)
diff --git a/tools/CMakeLists.txt b/tools/CMakeLists.txt
index 4ea9241..9b7b252 100644
--- a/tools/CMakeLists.txt
+++ b/tools/CMakeLists.txt
@@ -11,21 +11,9 @@ set(rime_api_console_src "rime_api_console.cc")
 add_executable(rime_api_console ${rime_api_console_src})
 target_link_libraries(rime_api_console ${rime_console_deps})
 
-set(CAPNPC_IMPORT_DIRS ${CAPNPC_IMPORT_DIRS} ${RIME_PROTO_SCHEMA_DIR})
-capnp_generate_cpp(CAPNP_SRCS CAPNP_HDRS rime_message.capnp)
-message(STATUS "compiled capnproto schemata (sources): ${CAPNP_SRCS}")
-message(STATUS "compiled capnproto schemata (headers): ${CAPNP_HDRS}")
-
-set(rime_proto_console_src
-  "rime_proto_console.cc"
-  ${CAPNP_SRCS}
-  ${rime_proto_objs})
-add_executable(rime_proto_console ${rime_proto_console_src})
-target_link_libraries(rime_proto_console ${rime_console_deps})
-target_include_directories(rime_proto_console
-  PRIVATE
-  ${CMAKE_CURRENT_BINARY_DIR}
-  ${RIME_PROTO_INCLUDE_DIR})
+set(rime_server_src "rime_server.cc")
+add_executable(rime_server ${rime_server_src})
+target_link_libraries(rime_server ${rime_console_deps})
 
 set(rime_patch_src "rime_patch.cc")
 add_executable(rime_patch ${rime_patch_src})
@@ -54,12 +42,15 @@ target_link_libraries(rime_deployer
   ${rime_dict_library}
   ${rime_levers_library})
 
+install(TARGETS rime_console DESTINATION ${BIN_INSTALL_DIR})
 install(TARGETS rime_deployer DESTINATION ${BIN_INSTALL_DIR})
 install(TARGETS rime_dict_manager DESTINATION ${BIN_INSTALL_DIR})
 
 endif()
 
 install(TARGETS rime_patch DESTINATION ${BIN_INSTALL_DIR})
+install(TARGETS rime_api_console DESTINATION ${BIN_INSTALL_DIR})
+install(TARGETS rime_server DESTINATION ${BIN_INSTALL_DIR})
 
 file(COPY ${PROJECT_SOURCE_DIR}/data/minimal/default.yaml
      DESTINATION ${EXECUTABLE_OUTPUT_PATH})
diff --git a/tools/rime_server.cc b/tools/rime_server.cc
new file mode 100644
index 0000000..1c5f164
--- /dev/null
+++ b/tools/rime_server.cc
@@ -0,0 +1,492 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <rime_api.h>
+#include <rime/config.h>
+#include <rime/deployer.h>
+#include <rime/lever/deployment_tasks.h>
+
+#include <boost/filesystem.hpp>
+
+#include <sys/socket.h>
+#include <unistd.h>
+#include <netinet/in.h>
+#include <string.h>
+#include <iostream>
+#include <arpa/inet.h>
+
+using namespace rime;
+
+#define READ_BUFFER_SIZE 1024
+#define KEY_BUFFER_SIZE 256
+
+#define CANDIDATES_SIZE 128
+
+#define SCHEMA_ID_SIZE 64
+#define FILE_PATH_SIZE 256
+#define ALGEBRA_ITEM_SIZE 64
+#define EXTRA_FIND 16
+
+const char *derive = "derive";
+
+char *header =
+    "HTTP/1.1 200 OK\r\n"
+    "Content-Type: text/html; charset=UTF-8\r\n"
+    "Access-Control-Allow-Origin: *\r\n";
+
+int get_algebra(char *fp)
+{
+  Config c;
+  c.LoadFromFile(fp);
+
+  ConfigMapEntryRef schema_list(c["patch"]["speller/algebra"]);
+  for (size_t j = 0; j < schema_list.size(); ++j)
+  {
+    fprintf(stderr, " %s \n", schema_list[j].ToString().c_str());
+  }
+  return 0;
+}
+int add_algebra(char *fp, char *item)
+{
+  return 0;
+}
+
+int set_active_schema(const string &schema_id)
+{
+  Config config;
+  if (!config.LoadFromFile("user.yaml"))
+  {
+    LOG(INFO) << "creating new file 'user.yaml'.";
+  }
+  config["var"]["previously_selected_schema"] = schema_id;
+  if (!config.SaveToFile("user.yaml"))
+  {
+    LOG(ERROR) << "failed to set active schema: " << schema_id;
+    return 1;
+  }
+  return 0;
+}
+
+void send_candidates(int client_fd, RimeApi *rime, RimeSessionId session_id, char *key_buff)
+{
+  rime->simulate_key_sequence(session_id, key_buff);
+
+  RIME_STRUCT(RimeContext, context);
+  rime->get_context(session_id, &context);
+
+  if (context.composition.length > 0)
+  {
+    const char *preedit = context.composition.preedit;
+    if (preedit)
+    {
+      char current[SCHEMA_ID_SIZE] = {0};
+      rime->get_current_schema(session_id, current, sizeof(current));
+      if (strstr(current, "double_pinyin"))
+      {
+        for (int i = 0; i < strlen(key_buff) - 1; i++)
+        {
+          send(client_fd, &key_buff[i], 1, 0);
+          if (i % 2 == 1)
+          {
+            send(client_fd, " ", 1, 0);
+          }
+        }
+        send(client_fd, &key_buff[strlen(key_buff) - 1], 1, 0);
+      }
+      else
+      {
+        send(client_fd, preedit, strlen(preedit), 0);
+      }
+      send(client_fd, "\n", 1, 0);
+    }
+  }
+  rime->free_context(&context);
+
+  RimeCandidateListIterator iterator = {0};
+  if (rime->candidate_list_begin(session_id, &iterator))
+  {
+    int count = 0;
+    while (rime->candidate_list_next(&iterator) && count < CANDIDATES_SIZE)
+    {
+      send(client_fd, iterator.candidate.text, strlen(iterator.candidate.text), 0);
+      send(client_fd, "\n", 1, 0);
+      count += 1;
+    }
+    rime->candidate_list_end(&iterator);
+  }
+  rime->clear_composition(session_id);
+}
+
+void select_candidate(int client_fd, RimeApi *rime, RimeSessionId session_id, char *key_buff)
+{
+  const char line_spliter[2] = "\n";
+  int ix_token = 0;
+  char *token = strtok(key_buff, line_spliter);
+
+  while (token != NULL)
+  {
+    char *context = NULL;
+
+    char source[KEY_BUFFER_SIZE];
+    char index[KEY_BUFFER_SIZE];
+    char candidate[KEY_BUFFER_SIZE];
+
+    int ix_var = 0;
+    char *var = strtok_r(token, " ", &context);
+
+    while (var != NULL && ix_var < 3)
+    {
+      if (ix_var == 0)
+      {
+        strcpy(source, var);
+      }
+      else if (ix_var == 1)
+      {
+        strcpy(index, var);
+      }
+      else if (ix_var == 2)
+      {
+        strcpy(candidate, var);
+      }
+      var = strtok_r(NULL, " ", &context);
+      ix_var += 1;
+    }
+
+    if (ix_var == 3)
+    {
+      int num = std::stoi(index);
+
+      if (ix_token == 0)
+      {
+        rime->simulate_key_sequence(session_id, source);
+      }
+
+      RimeCandidateListIterator iterator = {0};
+      if (rime->candidate_list_begin(session_id, &iterator))
+      {
+        int count = 0;
+        while (rime->candidate_list_next(&iterator) && count <= num + EXTRA_FIND)
+        {
+          if (strcmp(candidate, iterator.candidate.text) == 0)
+          {
+            rime->select_candidate(session_id, count);
+            break;
+          }
+          count += 1;
+        }
+      }
+      rime->candidate_list_end(&iterator);
+    }
+    token = strtok(NULL, line_spliter);
+    ix_token += 1;
+  }
+  rime->clear_composition(session_id);
+}
+
+void switch_schema(RimeApi *rime, RimeSessionId session_id, char *schema_id)
+{
+  RimeSchemaList list;
+  if (rime->get_schema_list(&list))
+  {
+    for (size_t i = 0; i < list.size; ++i)
+    {
+      if (!strcmp(schema_id, list.list[i].schema_id))
+      {
+        rime->select_schema(session_id, schema_id);
+        set_active_schema(schema_id);
+        break;
+      }
+    }
+    rime->free_schema_list(&list);
+  }
+}
+
+void send_current_schema(int client_fd, RimeApi *rime, RimeSessionId session_id)
+{
+  char current[SCHEMA_ID_SIZE] = {0};
+  rime->get_current_schema(session_id, current, sizeof(current));
+  send(client_fd, current, strlen(current), 0);
+}
+
+void send_algebra(int client_fd, ConfigMapEntryRef algebra_list)
+{
+  for (size_t i = 0; i < algebra_list.size(); ++i)
+  {
+    char item[ALGEBRA_ITEM_SIZE];
+    strcpy(item, algebra_list[i].ToString().c_str());
+    fprintf(stderr, "%s \n", item);
+    if (!strncmp(item, derive, strlen(derive)))
+    {
+      send(client_fd, item, strlen(item), 0);
+      send(client_fd, "\n", 1, 0);
+    }
+  }
+}
+
+void build_custom_yaml_fp(char *fp, RimeApi *rime, RimeSessionId session_id)
+{
+  char schema_id[SCHEMA_ID_SIZE] = {0};
+  rime->get_current_schema(session_id, schema_id, sizeof(schema_id));
+  strcpy(fp, schema_id);
+  strcat(fp, ".custom.yaml");
+}
+
+int handle_request(int client_fd, RimeApi *rime, RimeSessionId session_id)
+{
+  char read_buff[READ_BUFFER_SIZE];
+  char key_buff[KEY_BUFFER_SIZE];
+
+  int key_size = 0;
+  int read_bytes = recv(client_fd, read_buff, READ_BUFFER_SIZE, 0);
+
+  int body_size = 0;
+  bool ix_body_start = false;
+  for (int i = 0; i < read_bytes - 3; i++)
+  {
+    if (ix_body_start)
+    {
+      if (1)
+      {
+        key_buff[key_size] = read_buff[i + 3];
+        key_size += 1;
+      }
+    }
+    else if (
+        read_buff[i] == '\r' && read_buff[i + 1] == '\n' && read_buff[i + 2] == '\r' && read_buff[i + 3] == '\n')
+    {
+      ix_body_start = true;
+    }
+  }
+  key_buff[key_size] = '\0';
+
+  send(client_fd, header, strlen(header), 0);
+  send(client_fd, "\r\n", 2, 0);
+
+  fprintf(stderr, "key:: %s\n", key_buff);
+  if (key_buff[0] == '=')
+  {
+    const char *kSetSchema = "=schema=";
+    const char *kShowSchema = "=schema";
+
+    const char *kRemoveAlgebra = "=algebra-";
+    const char *kAddAlgebra = "=algebra+";
+    const char *kShowAlgebra = "=algebra";
+
+    if (!strcmp(key_buff, kShowSchema))
+    {
+      send_current_schema(client_fd, rime, session_id);
+    }
+    else if (!strncmp(key_buff, kSetSchema, strlen(kSetSchema)))
+    {
+      char *schema_id = &key_buff[strlen(kSetSchema)];
+      switch_schema(rime, session_id, schema_id);
+      send_current_schema(client_fd, rime, session_id);
+    }
+    else if (!strcmp(key_buff, kShowAlgebra))
+    {
+      char fp[FILE_PATH_SIZE];
+      build_custom_yaml_fp(fp, rime, session_id);
+      Config config;
+      if (!config.LoadFromFile(fp))
+      {
+        fprintf(stderr, "can not find file %s\n", fp);
+        return 0;
+      }
+      ConfigMapEntryRef algebra_list(config["patch"]["speller/algebra"]);
+      send_algebra(client_fd, algebra_list);
+    }
+    else if (!strncmp(key_buff, kAddAlgebra, strlen(kAddAlgebra)))
+    {
+      char *new_item = &key_buff[strlen(kAddAlgebra)];
+      std::cerr << new_item << std::endl;
+      if (strncmp(new_item, derive, strlen(derive)))
+      {
+        return 0;
+      }
+      std::cerr << "fp" << std::endl;
+      char fp[FILE_PATH_SIZE];
+      build_custom_yaml_fp(fp, rime, session_id);
+
+      Config config;
+      if (!config.LoadFromFile(fp))
+      {
+        fprintf(stderr, "can not find file %s\n", fp);
+        return 0;
+      }
+      ConfigMapEntryRef algebra_list(config["patch"]["speller/algebra"]);
+
+      int add_item = 1;
+      for (size_t i = 0; i < algebra_list.size(); ++i)
+      {
+        char item[ALGEBRA_ITEM_SIZE];
+        strcpy(item, algebra_list[i].ToString().c_str());
+        if (!strcmp(item, new_item))
+        {
+          add_item = 0;
+        }
+      }
+      if (add_item)
+      {
+        algebra_list[algebra_list.size()] = new_item;
+
+        if (!config.SaveToFile(fp))
+        {
+          LOG(ERROR) << "failed to save schema list";
+          return 0;
+        }
+        std::cerr << "algebra_list" << std::endl;
+      }
+      send_algebra(client_fd, algebra_list);
+
+      return add_item;
+    }
+    else if (!strncmp(key_buff, kRemoveAlgebra, strlen(kRemoveAlgebra)))
+    {
+      char *new_item = &key_buff[strlen(kRemoveAlgebra)];
+      if (strncmp(new_item, derive, strlen(derive)))
+      {
+        return 0;
+      }
+
+      char fp[FILE_PATH_SIZE];
+      build_custom_yaml_fp(fp, rime, session_id);
+
+      Config config;
+      if (!config.LoadFromFile(fp))
+      {
+        std::cerr << "can not find file" << std::endl;
+        return 0;
+      }
+
+      ConfigMapEntryRef algebra_list(config["patch"]["speller/algebra"]);
+
+      int remove_item = 0;
+      for (size_t i = 0; i < algebra_list.size(); ++i)
+      {
+        char item[ALGEBRA_ITEM_SIZE];
+        strcpy(item, algebra_list[i].ToString().c_str());
+        if (!strcmp(item, new_item))
+        {
+          remove_item += 1;
+          algebra_list[i].Clear();
+        }
+      }
+
+      if (remove_item)
+      {
+        if (!config.SaveToFile(fp))
+        {
+          LOG(ERROR) << "failed to save schema list.";
+          return 0;
+        }
+        std::cerr << "algebra_list" << std::endl;
+      }
+      send_algebra(client_fd, algebra_list);
+
+      return remove_item;
+    }
+  }
+  else if (key_buff[0] == '@')
+  {
+    select_candidate(client_fd, rime, session_id, &key_buff[1]);
+    return 0;
+  }
+  else
+  {
+    send_candidates(client_fd, rime, session_id, key_buff);
+    return 0;
+  }
+}
+
+RIME_API RimeApi *RimeInit()
+{
+  RimeApi *rime = rime_get_api();
+
+  RIME_STRUCT(RimeTraits, traits);
+  traits.app_name = "rime.server";
+
+  rime->setup(&traits);
+  rime->initialize(NULL);
+  Bool full_check = True;
+  if (rime->start_maintenance(full_check))
+  {
+    rime->join_maintenance_thread();
+  }
+
+  std::cerr << "rime api ready." << std::endl;
+  return rime;
+}
+
+int RimeUpdate()
+{
+  Deployer deployer;
+  InstallationUpdate installation;
+  if (!installation.Run(&deployer))
+  {
+    std::cerr << "failed to initialize installation." << std::endl;
+    return 1;
+  }
+  std::cerr << "initializing...";
+  WorkspaceUpdate workspace_update;
+  if (!workspace_update.Run(&deployer))
+  {
+    std::cerr << "failure!" << std::endl;
+    return 1;
+  }
+  std::cerr << "ready." << std::endl;
+
+  return 0;
+}
+
+int main(int argc, char *argv[])
+{
+  if (argc > 1)
+  {
+    chdir(argv[1]);
+  }
+  RimeApi *rime = RimeInit();
+  RimeUpdate();
+  std::cerr << "create session" << std::endl;
+  RimeSessionId session_id = rime->create_session();
+  int port = 12345;
+
+  int server_fd = socket(AF_INET, SOCK_STREAM, 0);
+  if (server_fd < 0)
+    return -1;
+
+  struct sockaddr_in sa;
+  int addrlen = sizeof(sa);
+  sa.sin_family = AF_INET;
+  sa.sin_port = htons(port);
+  sa.sin_addr.s_addr = inet_addr("127.0.0.1");
+
+  int opt_val = 1;
+  setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR, &opt_val, sizeof opt_val);
+  if (bind(server_fd, (struct sockaddr *)&sa, sizeof(sa)) < 0)
+    return -1;
+  if (listen(server_fd, SOMAXCONN) < 0)
+    return -1;
+
+  int client_fd;
+  int reponse_result;
+
+  while (1)
+  {
+    client_fd = accept(server_fd, (struct sockaddr *)&sa, (socklen_t *)&addrlen);
+    reponse_result = handle_request(client_fd, rime, session_id);
+    close(client_fd);
+
+    if (reponse_result == 1)
+    {
+      char current[SCHEMA_ID_SIZE] = {0};
+      rime->get_current_schema(session_id, current, sizeof(current));
+      if (RimeUpdate())
+      {
+        std::cerr << "rime configure deploy failed" << std::endl;
+      }
+      session_id = rime->create_session();
+      switch_schema(rime, session_id, current);
+    }
+  }
+  return 0;
+}
